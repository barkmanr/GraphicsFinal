#version 460

in vec3 retFragPos;
in vec3 retNormal;
in vec2 retTexCoord;
in vec3 retViewDirection;
in mat3 retTBN;

out vec4 FragColor;

struct Material
{
	float specularStrength;
	sampler2D diffuseTexture;
	sampler2D specularTexture;
	sampler2D normalTexture;
};

struct Light
{
	vec3 position;
	vec3 direction;
	vec3 color;
	vec3 ambientColor;
	vec3 diffuseColor;
	vec3 specularColor;
	int type;
	int On;

	float constant;
	float linear;
	float quadratic;

	float coneAngle;
	float falloff;


};

uniform Material material;
#define NUM_LIGHTS 1
uniform Light light[NUM_LIGHTS];
uniform bool EnableNormalMaps;

void main()
{
	vec4 diffColor = texture(material.diffuseTexture, retTexCoord);
	if(diffColor.a ==0)
	{
		discard;
	}

vec4 finalColor = vec4(0);

for(int i = 0; i < NUM_LIGHTS; i++)
{
if(light[i].On == 1)
{
vec3 normal = retNormal;
if(EnableNormalMaps == true)
{
normal = texture(material.normalTexture, retTexCoord).rgb;
normal = normal * 2.0 - 1.0;
normal = normalize(retTBN * normal);
}
	if(light[i].type == 1)
	{
		vec3 lightDir = (-light[i].direction);
		float lambertianStrength = dot(lightDir, retNormal);
		vec3 refl = reflect(-lightDir, normal);
		float specularStrength = pow(max(dot(refl, retViewDirection), 0.0f), material.specularStrength);

		vec3 ambient = texture(material.diffuseTexture, retTexCoord).rgb * light[i].ambientColor;
		vec3 lambertian = lambertianStrength * texture(material.diffuseTexture, retTexCoord).rgb * light[i].diffuseColor;
		vec3 specular = specularStrength * texture(material.specularTexture, retTexCoord).rgb * light[i].specularColor;

		finalColor += vec4(ambient + lambertian + specular, 1.0f);
	}
	if(light[i].type == 2)
	{
		vec3 lightDir = normalize(light[i].position - retFragPos);
		float lambertianStrength = dot(lightDir, retNormal);
		vec3 refl = reflect(-lightDir, normal);
		float specularStrength = pow(max(dot(retViewDirection,refl), 0.0f), material.specularStrength);
		float distance = length(light[i].position - retFragPos);
		float att = 1.0f / (light[i].constant + light[i].linear * distance + light[i].quadratic * (distance * distance));

		vec3 ambient = texture(material.diffuseTexture, retTexCoord).rgb * light[i].ambientColor * att;
		vec3 lambertian = lambertianStrength * texture(material.diffuseTexture, retTexCoord).rgb * light[i].diffuseColor;
		vec3 specular = specularStrength * texture(material.specularTexture, retTexCoord).rgb * light[i].specularColor;

		finalColor += vec4(ambient + lambertian + specular, 1.0f);
	}
	if(light[i].type == 3)
	{
		vec3 lightDir = normalize(light[i].position - retFragPos);
		float a = cos(light[i].coneAngle);
		float d = dot(normalize(light[i].direction), -lightDir);
		if (a < d)
		{
			float lambertianStrength = dot(lightDir, retNormal);
			vec3 refl = reflect(-lightDir, normal);
			float specularStrength = pow(max(dot(retViewDirection,refl), 0.0f), material.specularStrength);
			float distance = length(light[i].position - retFragPos);
			float att = 1.0f / (light[i].constant + light[i].linear * distance + light[i].quadratic * (distance * distance));
			att *= 1 - pow(clamp(a/d,0.0f,1.0f), light[i].falloff);

			vec3 ambient = texture(material.diffuseTexture, retTexCoord).rgb * light[i].ambientColor * att;
			vec3 lambertian = lambertianStrength * texture(material.diffuseTexture, retTexCoord).rgb * light[i].diffuseColor;
			vec3 specular = specularStrength * texture(material.specularTexture, retTexCoord).rgb * light[i].specularColor;

			finalColor += vec4(ambient + lambertian + specular, 1.0f);
		}
	}
	if(light[i].type == 4)
	{
	
		vec3 lightDir = normalize(light[i].position - retFragPos);
		float lambertianStrength = dot(lightDir, retNormal);

		vec3 refl = reflect(-lightDir, normal);
		float specularStrength = pow(max(dot(retViewDirection,refl), 0.0f), material.specularStrength);

		vec3 ambient = diffColor.rgb * light[i].ambientColor; // NUM_LIGHTS;
		vec3 lambertian = lambertianStrength * diffColor.rgb * light[i].diffuseColor;
		vec3 specular = specularStrength * texture(material.specularTexture, retTexCoord).rgb * light[i].specularColor;

		finalColor += vec4(ambient + lambertian + specular, 1.0f);
	}
	else
	{
		vec3 ambient = texture(material.diffuseTexture, retTexCoord).rgb * light[i].ambientColor;
		finalColor += vec4(ambient, 1.0f);
	}
}
}
FragColor = vec4(finalColor.rgb, diffColor.a);
}

